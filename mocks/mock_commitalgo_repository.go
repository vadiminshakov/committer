// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vadiminshakov/committer/core/cohort/commitalgo (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=../../../mocks/mock_commitalgo_repository.go -package=mocks -mock_names=Repository=MockCommitalgoRepository . Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCommitalgoRepository is a mock of Repository interface.
type MockCommitalgoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommitalgoRepositoryMockRecorder
	isgomock struct{}
}

// MockCommitalgoRepositoryMockRecorder is the mock recorder for MockCommitalgoRepository.
type MockCommitalgoRepositoryMockRecorder struct {
	mock *MockCommitalgoRepository
}

// NewMockCommitalgoRepository creates a new mock instance.
func NewMockCommitalgoRepository(ctrl *gomock.Controller) *MockCommitalgoRepository {
	mock := &MockCommitalgoRepository{ctrl: ctrl}
	mock.recorder = &MockCommitalgoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitalgoRepository) EXPECT() *MockCommitalgoRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCommitalgoRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCommitalgoRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCommitalgoRepository)(nil).Close))
}

// Get mocks base method.
func (m *MockCommitalgoRepository) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommitalgoRepositoryMockRecorder) Get(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommitalgoRepository)(nil).Get), key)
}

// Put mocks base method.
func (m *MockCommitalgoRepository) Put(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockCommitalgoRepositoryMockRecorder) Put(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockCommitalgoRepository)(nil).Put), key, value)
}

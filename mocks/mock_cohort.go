// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vadiminshakov/committer/io/gateway/grpc/server (interfaces: Cohort)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_cohort.go -package=mocks github.com/vadiminshakov/committer/io/gateway/grpc/server Cohort
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/vadiminshakov/committer/core/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockCohort is a mock of Cohort interface.
type MockCohort struct {
	ctrl     *gomock.Controller
	recorder *MockCohortMockRecorder
	isgomock struct{}
}

// MockCohortMockRecorder is the mock recorder for MockCohort.
type MockCohortMockRecorder struct {
	mock *MockCohort
}

// NewMockCohort creates a new mock instance.
func NewMockCohort(ctrl *gomock.Controller) *MockCohort {
	mock := &MockCohort{ctrl: ctrl}
	mock.recorder = &MockCohortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCohort) EXPECT() *MockCohortMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockCohort) Commit(ctx context.Context, in *dto.CommitRequest) (*dto.CohortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, in)
	ret0, _ := ret[0].(*dto.CohortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockCohortMockRecorder) Commit(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockCohort)(nil).Commit), ctx, in)
}

// Height mocks base method.
func (m *MockCohort) Height() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Height indicates an expected call of Height.
func (mr *MockCohortMockRecorder) Height() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockCohort)(nil).Height))
}

// Precommit mocks base method.
func (m *MockCohort) Precommit(ctx context.Context, index uint64) (*dto.CohortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Precommit", ctx, index)
	ret0, _ := ret[0].(*dto.CohortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Precommit indicates an expected call of Precommit.
func (mr *MockCohortMockRecorder) Precommit(ctx, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Precommit", reflect.TypeOf((*MockCohort)(nil).Precommit), ctx, index)
}

// Propose mocks base method.
func (m *MockCohort) Propose(ctx context.Context, req *dto.ProposeRequest) (*dto.CohortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Propose", ctx, req)
	ret0, _ := ret[0].(*dto.CohortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Propose indicates an expected call of Propose.
func (mr *MockCohortMockRecorder) Propose(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Propose", reflect.TypeOf((*MockCohort)(nil).Propose), ctx, req)
}

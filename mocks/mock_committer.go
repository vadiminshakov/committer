// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vadiminshakov/committer/core/cohort (interfaces: Committer)
//
// Generated by this command:
//
//	mockgen -destination=../../mocks/mock_committer.go -package=mocks . Committer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	hooks "github.com/vadiminshakov/committer/core/cohort/commitalgo/hooks"
	dto "github.com/vadiminshakov/committer/core/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockCommitter is a mock of Committer interface.
type MockCommitter struct {
	ctrl     *gomock.Controller
	recorder *MockCommitterMockRecorder
	isgomock struct{}
}

// MockCommitterMockRecorder is the mock recorder for MockCommitter.
type MockCommitterMockRecorder struct {
	mock *MockCommitter
}

// NewMockCommitter creates a new mock instance.
func NewMockCommitter(ctrl *gomock.Controller) *MockCommitter {
	mock := &MockCommitter{ctrl: ctrl}
	mock.recorder = &MockCommitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommitter) EXPECT() *MockCommitterMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockCommitter) Abort(ctx context.Context, req *dto.AbortRequest) (*dto.CohortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort", ctx, req)
	ret0, _ := ret[0].(*dto.CohortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Abort indicates an expected call of Abort.
func (mr *MockCommitterMockRecorder) Abort(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockCommitter)(nil).Abort), ctx, req)
}

// Commit mocks base method.
func (m *MockCommitter) Commit(ctx context.Context, req *dto.CommitRequest) (*dto.CohortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, req)
	ret0, _ := ret[0].(*dto.CohortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockCommitterMockRecorder) Commit(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockCommitter)(nil).Commit), ctx, req)
}

// Height mocks base method.
func (m *MockCommitter) Height() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Height")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Height indicates an expected call of Height.
func (mr *MockCommitterMockRecorder) Height() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Height", reflect.TypeOf((*MockCommitter)(nil).Height))
}

// Precommit mocks base method.
func (m *MockCommitter) Precommit(ctx context.Context, index uint64) (*dto.CohortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Precommit", ctx, index)
	ret0, _ := ret[0].(*dto.CohortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Precommit indicates an expected call of Precommit.
func (mr *MockCommitterMockRecorder) Precommit(ctx, index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Precommit", reflect.TypeOf((*MockCommitter)(nil).Precommit), ctx, index)
}

// Propose mocks base method.
func (m *MockCommitter) Propose(ctx context.Context, req *dto.ProposeRequest) (*dto.CohortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Propose", ctx, req)
	ret0, _ := ret[0].(*dto.CohortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Propose indicates an expected call of Propose.
func (mr *MockCommitterMockRecorder) Propose(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Propose", reflect.TypeOf((*MockCommitter)(nil).Propose), ctx, req)
}

// RegisterHook mocks base method.
func (m *MockCommitter) RegisterHook(hook hooks.Hook) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterHook", hook)
}

// RegisterHook indicates an expected call of RegisterHook.
func (mr *MockCommitterMockRecorder) RegisterHook(hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterHook", reflect.TypeOf((*MockCommitter)(nil).RegisterHook), hook)
}

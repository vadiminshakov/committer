// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InternalCommitAPIClient is the client API for InternalCommitAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalCommitAPIClient interface {
	Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*Response, error)
	Precommit(ctx context.Context, in *PrecommitRequest, opts ...grpc.CallOption) (*Response, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*Response, error)
	Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*Response, error)
}

type internalCommitAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalCommitAPIClient(cc grpc.ClientConnInterface) InternalCommitAPIClient {
	return &internalCommitAPIClient{cc}
}

func (c *internalCommitAPIClient) Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/schema.InternalCommitAPI/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalCommitAPIClient) Precommit(ctx context.Context, in *PrecommitRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/schema.InternalCommitAPI/Precommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalCommitAPIClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/schema.InternalCommitAPI/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalCommitAPIClient) Abort(ctx context.Context, in *AbortRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/schema.InternalCommitAPI/Abort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalCommitAPIServer is the server API for InternalCommitAPI service.
// All implementations must embed UnimplementedInternalCommitAPIServer
// for forward compatibility
type InternalCommitAPIServer interface {
	Propose(context.Context, *ProposeRequest) (*Response, error)
	Precommit(context.Context, *PrecommitRequest) (*Response, error)
	Commit(context.Context, *CommitRequest) (*Response, error)
	Abort(context.Context, *AbortRequest) (*Response, error)
	mustEmbedUnimplementedInternalCommitAPIServer()
}

// UnimplementedInternalCommitAPIServer must be embedded to have forward compatible implementations.
type UnimplementedInternalCommitAPIServer struct {
}

func (UnimplementedInternalCommitAPIServer) Propose(context.Context, *ProposeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedInternalCommitAPIServer) Precommit(context.Context, *PrecommitRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Precommit not implemented")
}
func (UnimplementedInternalCommitAPIServer) Commit(context.Context, *CommitRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedInternalCommitAPIServer) Abort(context.Context, *AbortRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Abort not implemented")
}
func (UnimplementedInternalCommitAPIServer) mustEmbedUnimplementedInternalCommitAPIServer() {}

// UnsafeInternalCommitAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalCommitAPIServer will
// result in compilation errors.
type UnsafeInternalCommitAPIServer interface {
	mustEmbedUnimplementedInternalCommitAPIServer()
}

func RegisterInternalCommitAPIServer(s grpc.ServiceRegistrar, srv InternalCommitAPIServer) {
	s.RegisterService(&InternalCommitAPI_ServiceDesc, srv)
}

func _InternalCommitAPI_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalCommitAPIServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.InternalCommitAPI/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalCommitAPIServer).Propose(ctx, req.(*ProposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalCommitAPI_Precommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalCommitAPIServer).Precommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.InternalCommitAPI/Precommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalCommitAPIServer).Precommit(ctx, req.(*PrecommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalCommitAPI_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalCommitAPIServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.InternalCommitAPI/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalCommitAPIServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalCommitAPI_Abort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalCommitAPIServer).Abort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.InternalCommitAPI/Abort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalCommitAPIServer).Abort(ctx, req.(*AbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternalCommitAPI_ServiceDesc is the grpc.ServiceDesc for InternalCommitAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternalCommitAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schema.InternalCommitAPI",
	HandlerType: (*InternalCommitAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _InternalCommitAPI_Propose_Handler,
		},
		{
			MethodName: "Precommit",
			Handler:    _InternalCommitAPI_Precommit_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _InternalCommitAPI_Commit_Handler,
		},
		{
			MethodName: "Abort",
			Handler:    _InternalCommitAPI_Abort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}

// ClientAPIClient is the client API for ClientAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientAPIClient interface {
	Put(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Value, error)
	NodeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Info, error)
}

type clientAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewClientAPIClient(cc grpc.ClientConnInterface) ClientAPIClient {
	return &clientAPIClient{cc}
}

func (c *clientAPIClient) Put(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/schema.ClientAPI/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAPIClient) Get(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/schema.ClientAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientAPIClient) NodeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/schema.ClientAPI/NodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientAPIServer is the server API for ClientAPI service.
// All implementations must embed UnimplementedClientAPIServer
// for forward compatibility
type ClientAPIServer interface {
	Put(context.Context, *Entry) (*Response, error)
	Get(context.Context, *Msg) (*Value, error)
	NodeInfo(context.Context, *emptypb.Empty) (*Info, error)
	mustEmbedUnimplementedClientAPIServer()
}

// UnimplementedClientAPIServer must be embedded to have forward compatible implementations.
type UnimplementedClientAPIServer struct {
}

func (UnimplementedClientAPIServer) Put(context.Context, *Entry) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedClientAPIServer) Get(context.Context, *Msg) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedClientAPIServer) NodeInfo(context.Context, *emptypb.Empty) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeInfo not implemented")
}
func (UnimplementedClientAPIServer) mustEmbedUnimplementedClientAPIServer() {}

// UnsafeClientAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientAPIServer will
// result in compilation errors.
type UnsafeClientAPIServer interface {
	mustEmbedUnimplementedClientAPIServer()
}

func RegisterClientAPIServer(s grpc.ServiceRegistrar, srv ClientAPIServer) {
	s.RegisterService(&ClientAPI_ServiceDesc, srv)
}

func _ClientAPI_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAPIServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.ClientAPI/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAPIServer).Put(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.ClientAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAPIServer).Get(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientAPI_NodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientAPIServer).NodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.ClientAPI/NodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientAPIServer).NodeInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientAPI_ServiceDesc is the grpc.ServiceDesc for ClientAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schema.ClientAPI",
	HandlerType: (*ClientAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _ClientAPI_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ClientAPI_Get_Handler,
		},
		{
			MethodName: "NodeInfo",
			Handler:    _ClientAPI_NodeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommitClient is the client API for Commit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommitClient interface {
	Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*Response, error)
	Precommit(ctx context.Context, in *PrecommitRequest, opts ...grpc.CallOption) (*Response, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*Response, error)
	Put(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Response, error)
	Get(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Value, error)
	NodeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Info, error)
}

type commitClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitClient(cc grpc.ClientConnInterface) CommitClient {
	return &commitClient{cc}
}

func (c *commitClient) Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/schema.Commit/Propose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) Precommit(ctx context.Context, in *PrecommitRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/schema.Commit/Precommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/schema.Commit/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) Put(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/schema.Commit/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) Get(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/schema.Commit/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitClient) NodeInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/schema.Commit/NodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitServer is the server API for Commit service.
// All implementations must embed UnimplementedCommitServer
// for forward compatibility
type CommitServer interface {
	Propose(context.Context, *ProposeRequest) (*Response, error)
	Precommit(context.Context, *PrecommitRequest) (*Response, error)
	Commit(context.Context, *CommitRequest) (*Response, error)
	Put(context.Context, *Entry) (*Response, error)
	Get(context.Context, *Msg) (*Value, error)
	NodeInfo(context.Context, *emptypb.Empty) (*Info, error)
	mustEmbedUnimplementedCommitServer()
}

// UnimplementedCommitServer must be embedded to have forward compatible implementations.
type UnimplementedCommitServer struct {
}

func (UnimplementedCommitServer) Propose(context.Context, *ProposeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedCommitServer) Precommit(context.Context, *PrecommitRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Precommit not implemented")
}
func (UnimplementedCommitServer) Commit(context.Context, *CommitRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedCommitServer) Put(context.Context, *Entry) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedCommitServer) Get(context.Context, *Msg) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCommitServer) NodeInfo(context.Context, *emptypb.Empty) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeInfo not implemented")
}
func (UnimplementedCommitServer) mustEmbedUnimplementedCommitServer() {}

// UnsafeCommitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommitServer will
// result in compilation errors.
type UnsafeCommitServer interface {
	mustEmbedUnimplementedCommitServer()
}

func RegisterCommitServer(s grpc.ServiceRegistrar, srv CommitServer) {
	s.RegisterService(&Commit_ServiceDesc, srv)
}

func _Commit_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Commit/Propose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Propose(ctx, req.(*ProposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_Precommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Precommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Commit/Precommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Precommit(ctx, req.(*PrecommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Commit/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Commit/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Put(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Commit/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).Get(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commit_NodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServer).NodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schema.Commit/NodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServer).NodeInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Commit_ServiceDesc is the grpc.ServiceDesc for Commit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Commit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schema.Commit",
	HandlerType: (*CommitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Propose",
			Handler:    _Commit_Propose_Handler,
		},
		{
			MethodName: "Precommit",
			Handler:    _Commit_Precommit_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Commit_Commit_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Commit_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Commit_Get_Handler,
		},
		{
			MethodName: "NodeInfo",
			Handler:    _Commit_NodeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}
